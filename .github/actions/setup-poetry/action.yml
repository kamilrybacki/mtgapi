name: 'Setup Poetry Environment'
description: 'Sets up Python, caches virtualenv and pip wheels, installs Poetry with plugin, and optionally installs dependencies.'
inputs:
  python-version:
    description: 'Python version to use'
    required: true
    default: '3.12'
  install-deps:
    description: 'Set to true to run poetry install (with all groups).'
    required: false
    default: 'true'
  poetry-version:
    description: 'Poetry version spec (e.g., 1.8.*)'
    required: false
    default: '1.8.*'
  cache-key-suffix:
    description: 'Extra suffix to differentiate caches (e.g., job name)'
    required: false
    default: ''
runs:
  using: 'composite'
  steps:
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}

    - name: Cache pip wheels
      id: pip-cache
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: pip-${{ runner.os }}-py${{ inputs.python-version }}-${{ hashFiles('**/poetry.lock') }}${{ inputs.cache-key-suffix }}
        restore-keys: |
          pip-${{ runner.os }}-py${{ inputs.python-version }}-

    - name: Cache virtualenv
      id: venv-cache
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-py${{ inputs.python-version }}-${{ hashFiles('poetry.lock') }}${{ inputs.cache-key-suffix }}
        restore-keys: |
          venv-${{ runner.os }}-py${{ inputs.python-version }}-

    - name: Install Poetry
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install "poetry==${{ inputs.poetry-version }}"
        poetry self add poetry-plugin-export
        poetry --version
      env:
        POETRY_VIRTUALENVS_IN_PROJECT: "true"
        POETRY_VIRTUALENVS_CREATE: "true"

    - name: Install dependencies
      if: inputs.install-deps == 'true'
      shell: bash
      run: |
        poetry install --all-groups
      env:
        POETRY_VIRTUALENVS_IN_PROJECT: "true"
        POETRY_VIRTUALENVS_CREATE: "true"
