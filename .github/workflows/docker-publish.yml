name: docker-publish

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  POETRY_VERSION: "1.8.*"

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    env:
      POETRY_VIRTUALENVS_IN_PROJECT: "true"
      POETRY_VIRTUALENVS_CREATE: "true"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup environment (Poetry + caches)
        uses: ./.github/actions/setup-poetry
        with:
          python-version: '3.12'
          poetry-version: ${{ env.POETRY_VERSION }}
          install-deps: 'false'
          cache-key-suffix: '-publish'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Resolve base image digest
        id: baseimage
        run: |
          set -euo pipefail
          REF="python:3.12-slim"
          DIGEST=$(docker pull "$REF" | grep Digest | awk '{print $2}')
          echo "ref=$REF" >> "$GITHUB_OUTPUT"
          echo "digest=$DIGEST" >> "$GITHUB_OUTPUT"
          echo "Resolved $REF -> $DIGEST"

      - name: Dependency resolution sanity (poetry export)
        run: |
          poetry --version
          poetry export --without-hashes -f requirements.txt -o requirements-resolved.txt
          echo '--- First 30 lines of resolved requirements ---'
          head -n 30 requirements-resolved.txt || true
        continue-on-error: false

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deploy/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BASE_IMAGE=${{ steps.baseimage.outputs.ref }}@${{ steps.baseimage.outputs.digest }}

      - name: Generate SBOM (Syft)
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b ./bin
          ./bin/syft ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest -o cyclonedx-json=sbom-cyclonedx.json -o spdx-json=sbom-spdx.json

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: |
            sbom-cyclonedx.json
            sbom-spdx.json
          retention-days: 7

      - name: Trivy vulnerability scan (image)
        if: github.ref == 'refs/heads/main'
        run: |
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock:ro \
            aquasec/trivy:latest image \
            --severity CRITICAL,HIGH \
            --ignore-unfixed \
            --exit-code 1 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Summarize
        run: |
          echo "Published image tags:"
          echo '${{ steps.meta.outputs.tags }}'
