version: '3'

vars:
  FULL_PACKAGER_COMMAND: ".venv/bin/python -m poetry"

tasks:
  install-dev:
    desc: Install development dependencies
    cmds:
      - "{{.FULL_PACKAGER_COMMAND}} install --all-groups"

  install-prod:
    desc: Install production dependencies
    cmds:
      - "{{.FULL_PACKAGER_COMMAND}} install --no-dev"

  enable-pre-commit:
    desc: Enable pre-commit hooks
    cmds:
      - "{{.FULL_PACKAGER_COMMAND}} run pre-commit install"
      - "{{.FULL_PACKAGER_COMMAND}} run pre-commit autoupdate"

  initialize-venv:
    desc: Initialize the virtual environment
    cmds:
      - |
        if [ ! -d ".venv" ]; then
          echo "Creating virtual environment at .venv"
          python -m virtualenv --python={{.BACKEND__PYTHON_VERSION}} .venv
          source .venv/bin/activate || . .venv/bin/activate || true
          .venv/bin/python -m pip install --upgrade poetry
          {{.FULL_PACKAGER_COMMAND}} config virtualenvs.path .venv
          {{.FULL_PACKAGER_COMMAND}} config virtualenvs.create false
          {{.FULL_PACKAGER_COMMAND}} config cache-dir {{.RELATIVE_CACHE_PATH}}
          {{.FULL_PACKAGER_COMMAND}} config virtualenvs.in-project true
        fi

  init-project:
    desc: Initialize the project and install dependencies
    cmds:
      - task: initialize-venv
      - task: install-dev
      - task: enable-pre-commit

  lint:
    desc: Run linters and formatters
    cmds:
      - "{{.FULL_PACKAGER_COMMAND}} run ruff check --config pyproject.toml"
      - "{{.FULL_PACKAGER_COMMAND}} run mypy . --config-file pyproject.toml"
