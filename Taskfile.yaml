version: '3'

vars:
  # Use the globally installed poetry (as set up in CI) if available, otherwise
  # fall back to invoking via python -m poetry inside the venv. This prevents
  # failures like: ".venv/bin/python -m poetry run ruff ..." when poetry isn't
  # installed inside the project virtualenv (we usually install it globally).
  FULL_PACKAGER_COMMAND: |
    if command -v poetry >/dev/null 2>&1; then
      echo poetry
    elif [ -x .venv/bin/poetry ]; then
      echo .venv/bin/poetry
    else
      echo ".venv/bin/python -m poetry"
    fi

tasks:
  install-dev:
    desc: Install development dependencies
    cmds:
      - "{{.FULL_PACKAGER_COMMAND}} lock"
      - "{{.FULL_PACKAGER_COMMAND}} install --all-groups"

  install-prod:
    desc: Install production dependencies
    cmds:
      - "{{.FULL_PACKAGER_COMMAND}} install --no-dev"

  initialize-venv:
    desc: Initialize the virtual environment
    cmds:
      - |
        if [ ! -d ".venv" ]; then
          echo "Creating virtual environment at .venv"
          python -m virtualenv --python={{.BACKEND__PYTHON_VERSION}} .venv
          source .venv/bin/activate || . .venv/bin/activate || true
          .venv/bin/python -m pip install --upgrade poetry
          {{.FULL_PACKAGER_COMMAND}} config virtualenvs.path .venv
          {{.FULL_PACKAGER_COMMAND}} config virtualenvs.create false
          {{.FULL_PACKAGER_COMMAND}} config cache-dir {{.RELATIVE_CACHE_PATH}}
          {{.FULL_PACKAGER_COMMAND}} config virtualenvs.in-project true
        fi

  init-project:
    desc: Initialize the project and install dependencies
    cmds:
      - task: initialize-venv
      - task: install-dev
      - task: enable-pre-commit

  lint:
    desc: Run linters and type checker (auto-fix first, then strict)
    cmds:
      - |
        POETRY_CMD=$({{.FULL_PACKAGER_COMMAND}})
        echo "Using package command: $POETRY_CMD"
        $POETRY_CMD run ruff format --config pyproject.toml
        $POETRY_CMD run ruff check --fix --config pyproject.toml || true
        $POETRY_CMD run ruff check --config pyproject.toml
        $POETRY_CMD run mypy . --config-file pyproject.toml

  format:
    desc: Format the codebase (idempotent)
    cmds:
      - |
        POETRY_CMD=$({{.FULL_PACKAGER_COMMAND}})
        $POETRY_CMD run ruff format --config pyproject.toml
        # Attempt safe fixes; ignore non-zero exit due to residual issues.
        $POETRY_CMD run ruff check --fix --config pyproject.toml >/dev/null || true

  test:
    desc: Run tests
    env:
      TESTCONTAINERS_HOST_OVERRIDE: "127.0.0.1"
    cmds:
      - |
        POETRY_CMD=$({{.FULL_PACKAGER_COMMAND}})
        $POETRY_CMD run pytest --config-file pyproject.toml -svv

  test-chosen:
    desc: Run tests marked as "chosen"
    env:
      TESTCONTAINERS_HOST_OVERRIDE: "127.0.0.1"
    cmds:
      - |
        POETRY_CMD=$({{.FULL_PACKAGER_COMMAND}})
        $POETRY_CMD run pytest --config-file pyproject.toml -svv -m 'chosen'

  test-offline:
    desc: Run tests that can be run offline
    env:
      TESTCONTAINERS_HOST_OVERRIDE: "127.0.0.1"
    cmds:
      - |
        POETRY_CMD=$({{.FULL_PACKAGER_COMMAND}})
        $POETRY_CMD run pytest --config-file pyproject.toml -svv -m 'offline'

  start-api:
    desc: Start the API server
    dotenv:
      - .env
    cmds:
      - docker compose -f deploy/docker-compose.yaml up --build

  build-image:
    desc: Build the local Docker image (no push)
    vars:
      IMAGE_NAME: 'ghcr.io/{{.GITHUB__REPOSITORY | default "kamilrybacki/mtgapi"}}'
      DOCKERFILE: "deploy/Dockerfile"
    cmds:
      - docker build -f {{.DOCKERFILE}} -t {{.IMAGE_NAME}}:local .

  push-image:
    desc: Build and push image to GHCR (requires 'docker login ghcr.io')
    vars:
      IMAGE_NAME: 'ghcr.io/{{.GITHUB__REPOSITORY | default "kamilrybacki/mtgapi"}}'
      DOCKERFILE: "deploy/Dockerfile"
    cmds:
      - docker build -f {{.DOCKERFILE}} -t {{.IMAGE_NAME}}:latest .
      - docker push {{.IMAGE_NAME}}:latest

  docs-build:
    desc: Build MkDocs site into site/
    cmds:
      - |
        POETRY_CMD=$({{.FULL_PACKAGER_COMMAND}})
        $POETRY_CMD run mkdocs build --strict

  docs-serve:
    desc: Serve MkDocs with live reload
    cmds:
      - |
        POETRY_CMD=$({{.FULL_PACKAGER_COMMAND}})
        $POETRY_CMD run mkdocs serve -a 0.0.0.0:8001

  security-scan:
    desc: Run Bandit security scan
    cmds:
      - |
        POETRY_CMD=$({{.FULL_PACKAGER_COMMAND}})
        $POETRY_CMD run bandit -q -r src -f screen --exclude tests

  dependency-audit:
    desc: Run pip-audit on exported requirements
    cmds:
      - |
        POETRY_CMD=$({{.FULL_PACKAGER_COMMAND}})
        $POETRY_CMD export -f requirements.txt --output requirements.txt --without-hashes
        $POETRY_CMD run pip-audit -r requirements.txt --progress-spinner=off

  coverage-badge:
    desc: Generate local coverage.xml and update badges/coverage.svg
    cmds:
      - |
        POETRY_CMD=$({{.FULL_PACKAGER_COMMAND}})
        $POETRY_CMD run coverage run -m pytest -q
        $POETRY_CMD run coverage xml
        percent=$(grep -o 'line-rate="[0-9.]*"' coverage.xml | head -1 | cut -d '"' -f2)
        pct=$(python -c "print(int(round(float('$percent')*100)))")
        mkdir -p badges
        color=brightgreen
        if [ "$pct" -lt 90 ]; then color=yellowgreen; fi
        if [ "$pct" -lt 80 ]; then color=yellow; fi
        if [ "$pct" -lt 70 ]; then color=orange; fi
        if [ "$pct" -lt 60 ]; then color=red; fi
        cat > badges/coverage.svg <<EOF
        <svg xmlns="http://www.w3.org/2000/svg" width="120" height="20" role="img" aria-label="coverage:${pct}%"><title>coverage:${pct}%</title><linearGradient id="s" x2="0" y2="100%"><stop offset="0" stop-color="#bbb" stop-opacity=".1"/><stop offset="1" stop-opacity=".1"/></linearGradient><clipPath id="r"><rect width="120" height="20" rx="3" fill="#fff"/></clipPath><g clip-path="url(#r)"><rect width="63" height="20" fill="#555"/><rect x="63" width="57" height="20" fill="#${color}"/><rect width="120" height="20" fill="url(#s)"/></g><g fill="#fff" text-anchor="middle" font-family="Verdana,Geneva,DejaVu Sans,sans-serif" text-rendering="geometricPrecision" font-size="110"><text aria-hidden="true" x="325" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="530">coverage</text><text x="325" y="140" transform="scale(.1)" fill="#fff" textLength="530">coverage</text><text aria-hidden="true" x="905" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="370">${pct}%</text><text x="905" y="140" transform="scale(.1)" fill="#fff" textLength="370">${pct}%</text></g></svg>
        EOF
        echo "Updated badges/coverage.svg to ${pct}%"

  export-schemas:
    desc: Export JSON schemas for domain models
    cmds:
      - |
        POETRY_CMD=$({{.FULL_PACKAGER_COMMAND}})
        $POETRY_CMD run python scripts/export_schemas.py

  export-openapi:
    desc: Export OpenAPI schema to docs/_generated_openapi
    cmds:
      - |
        POETRY_CMD=$({{.FULL_PACKAGER_COMMAND}})
        $POETRY_CMD run python scripts/export_openapi.py

  enable-pre-commit:
    desc: Install pre-commit hooks locally
    cmds:
      - |
        POETRY_CMD=$({{.FULL_PACKAGER_COMMAND}})
        $POETRY_CMD run pre-commit install --install-hooks

  pre-commit-run-all:
    desc: Run all pre-commit hooks against the entire codebase
    cmds:
      - |
        POETRY_CMD=$({{.FULL_PACKAGER_COMMAND}})
        $POETRY_CMD run pre-commit run --all-files
