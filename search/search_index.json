{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MTG API","text":"<p>Welcome to the documentation site for the MTG Card Info API.</p>"},{"location":"#overview","title":"Overview","text":"<p>This service provides structured, cached access to Magic: The Gathering card data via a FastAPI application.</p>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Architecture</li> <li>Configuration</li> <li>API Usage</li> <li>Development</li> </ul>"},{"location":"concepts/architecture/","title":"Architecture","text":"<p>FastAPI (entrypoint) -&gt; Services (DI) -&gt; { Cache | Postgres | External APIs }                                   -&gt; Domain Models (MTGCard)</p>"},{"location":"concepts/architecture/#layers","title":"Layers","text":"<ul> <li>Entry Point: Manages lifespan and wiring.</li> <li>Services: External API clients, caching, database access, proxies.</li> <li>Domain: Typed models and transformations.</li> <li>Config: Structured settings &amp; dependency injection.</li> </ul>"},{"location":"concepts/architecture/#future-enhancements","title":"Future Enhancements","text":"<ul> <li>Redis cache backend</li> <li>Additional data sources (pricing, legality)</li> <li>Observability (OpenTelemetry)</li> <li>Enhanced caching strategies (see Caching concept for current approach and roadmap)</li> </ul> <p>This page was migrated from the previous flat docs structure.</p>"},{"location":"concepts/caching/","title":"Caching","text":"<p>Efficient caching minimizes upstream latency and reduces redundant external calls.</p>"},{"location":"concepts/caching/#goals","title":"Goals","text":"<ul> <li>Reduce latency for frequently requested cards.</li> <li>Protect upstream APIs from burst traffic.</li> <li>Provide predictable staleness window while enabling eventual consistency.</li> </ul>"},{"location":"concepts/caching/#current-implementation","title":"Current Implementation","text":"<p>An in\u2011memory dictionary keyed by string card identifiers:</p> <ul> <li>Stored value: fully materialized <code>MTGCard</code> instance.</li> <li>Lifetime: process lifetime (no TTL yet).</li> <li>Eviction: none (assumes moderate working set size).</li> </ul>"},{"location":"concepts/caching/#cache-flow","title":"Cache Flow","text":"<ol> <li>Endpoint receives request for card id <code>X</code>.</li> <li>Lookup in cache. If hit \u2192 return.</li> <li>Miss \u2192 fetch from MTGIO via service.</li> <li>Convert to <code>MTGCard</code>, store, return.</li> </ol>"},{"location":"concepts/caching/#future-enhancements","title":"Future Enhancements","text":"Feature Benefit Notes TTL / Expiration Bound staleness Consider adaptive TTL per rarity Size-based Eviction Avoid unbounded memory LRU or LFU policies Distributed Cache (Redis) Horizontal scaling Leverage key prefixing <code>card:{id}</code> Negative Caching Fewer repeat misses Short TTL for known absent IDs Compression Memory reduction Only if memory pressure emerges"},{"location":"concepts/caching/#key-design-choices","title":"Key Design Choices","text":"<ul> <li>No premature invalidation: Until churn metrics warrant it, skip complexity.</li> <li>Whole-object storage: Avoid partial fragments; simplifies serialization.</li> <li>Synchronous population: First requester pays fetch cost\u2014could later add background warmers.</li> </ul>"},{"location":"concepts/caching/#operational-considerations","title":"Operational Considerations","text":"<ul> <li>Track hit ratio (future metrics hook).</li> <li>Provide cache clear / stats endpoint if administrative needs arise.</li> </ul> <p>Keep caching transparent to domain logic\u2014swap implementation without changing core business code.</p>"},{"location":"concepts/domain-models/","title":"Domain Models","text":"<p>The domain layer is the heart of the service. It transforms raw upstream API payloads into typed, cohesive objects that the rest of the codebase can reason about.</p>"},{"location":"concepts/domain-models/#design-goals","title":"Design Goals","text":"<ul> <li>Clarity over completeness: Only persist and expose fields that the application actually needs.</li> <li>Forward compatibility: Model construction is tolerant to unknown / additional upstream fields.</li> <li>Pure transformations: Domain objects should avoid side effects; enrichment (e.g. caching, HTTP calls) happens in services.</li> <li>Serialization boundary: Pydantic models (e.g. <code>MTGIOCard</code>) accept the raw JSON shape; high-level models (e.g. <code>MTGCard</code>) normalize to stable internal names and types.</li> </ul>"},{"location":"concepts/domain-models/#key-models","title":"Key Models","text":""},{"location":"concepts/domain-models/#mtgiocard","title":"MTGIOCard","text":"<p>Represents the direct shape returned by the external MTGIO API. This model is intentionally close to the source so that upstream schema drift is easy to detect.</p>"},{"location":"concepts/domain-models/#mtgcard","title":"MTGCard","text":"<p>The canonical internal representation used by endpoints and caching. It:</p> <ul> <li>Normalizes optional / missing fields.</li> <li>Provides convenience constructors (e.g. <code>from_mtgio_card</code>).</li> <li>Implements basic validation &amp; derived properties (e.g. computed mana value if needed).</li> </ul>"},{"location":"concepts/domain-models/#manavalue","title":"ManaValue","text":"<p>A tiny semantic wrapper describing a card's converted mana cost / total pip value. Encapsulating it:</p> <ul> <li>Gives a future hook for formatting and comparison logic.</li> <li>Centralizes potential validation (e.g. non-negative enforcement).</li> </ul>"},{"location":"concepts/domain-models/#schema-export","title":"Schema Export","text":"<p>Run:</p> <p><pre><code>task export-schemas\n</code></pre> This writes JSON Schema documents into <code>docs/_generated_schemas/</code> which are then included in the rendered documentation.</p>"},{"location":"concepts/domain-models/#evolution-strategy","title":"Evolution Strategy","text":"<p>When adding or modifying fields:</p> <ol> <li>Update upstream (raw) model first if the source API changed.</li> <li>Adjust internal <code>MTGCard</code> with a migration function or fallback logic so older cache entries (if any) remain readable.</li> <li>Regenerate schemas (<code>task export-schemas</code>) and OpenAPI (<code>task export-openapi</code>).</li> <li>Add tests demonstrating the new or changed field.</li> </ol> <p>Keep business rules out of the models\u2014push them into service layer objects for testability and separation of concerns.</p>"},{"location":"concepts/feature-flags/","title":"Feature Flags (Planned)","text":"<p>The API includes a placeholder endpoint <code>GET /feature-flags</code> returning HTTP 501 until real flagging is enabled.</p>"},{"location":"concepts/feature-flags/#goals","title":"Goals","text":"<ol> <li>Allow progressive rollout of non-breaking enhancements (instrumentation, performance tweaks).</li> <li>Provide safe-guarded experiments (A/B style) without redeploying core logic.</li> <li>Keep operational surface minimal for now (config-file / env-driven) before considering a SaaS provider.</li> </ol>"},{"location":"concepts/feature-flags/#initial-scope","title":"Initial Scope","text":"Flag Purpose Phase <code>telemetry.metrics</code> Enable metrics collection &amp; <code>/metrics</code> endpoint. Telemetry Phase 1 <code>telemetry.tracing</code> Enable tracing provider &amp; spans. Telemetry Phase 2 <code>api.experimental-endpoints</code> Expose any experimental routes under <code>/_exp</code>. As needed"},{"location":"concepts/feature-flags/#implementation-outline","title":"Implementation Outline","text":"<p>Short-term (Phase A):</p> <ul> <li>Simple Pydantic settings model: <code>FEATURE_FLAGS: list[str]</code> or structured <code>FeatureFlags</code> model.</li> <li>Helper: <code>is_flag_enabled(name: str) -&gt; bool</code> that checks (1) in-memory cache of flags, (2) environment, (3) fallback file.</li> <li><code>GET /feature-flags</code> returns dictionary of known flags + boolean state.</li> </ul> <p>Mid-term (Phase B):</p> <ul> <li>Add cache invalidation endpoint (auth-protected) or TTL reload.</li> <li>Support hierarchical flags (<code>telemetry.*</code>).</li> </ul> <p>Long-term (Phase C):</p> <ul> <li>Optional integration with LaunchDarkly / Unleash / Flagsmith via provider adapter.</li> <li>Percentage rollouts.</li> <li>Context-aware evaluations (e.g., request headers, user tokens if auth added later).</li> </ul>"},{"location":"concepts/feature-flags/#data-model-sketch","title":"Data Model Sketch","text":"<pre><code>from pydantic import BaseModel\n\nclass FeatureFlags(BaseModel):\n    telemetry_metrics: bool = False\n    telemetry_tracing: bool = False\n    api_experimental_endpoints: bool = False\n</code></pre> <p>Runtime accessor:</p> <pre><code>def is_flag_enabled(flag: str) -&gt; bool:\n    flags = FeatureFlags()  # real impl: singleton or DI provided\n    return getattr(flags, flag.replace('.', '_'), False)\n</code></pre>"},{"location":"concepts/feature-flags/#configuration","title":"Configuration","text":"Variable Type Default Description <code>FEATURE_FLAGS</code> CSV / str empty Global on/off list of flags, overrides config defaults. <code>FEATURE_FLAGS_FILE</code> path empty Optional JSON/YAML file with structured flag states."},{"location":"concepts/feature-flags/#endpoint-contract-planned","title":"Endpoint Contract (planned)","text":"<p><code>GET /feature-flags</code></p> <pre><code>{\n  \"flags\": {\n    \"telemetry.metrics\": false,\n    \"telemetry.tracing\": false,\n    \"api.experimental-endpoints\": false\n  },\n  \"detail\": \"feature flags not implemented\"\n}\n</code></pre>"},{"location":"concepts/feature-flags/#testing-strategy","title":"Testing Strategy","text":"<ul> <li>Unit: <code>is_flag_enabled</code> path coverage (env override, file fallback, default).</li> <li>Integration: Hitting <code>/feature-flags</code> returns list of known flags (even if false).</li> <li>Future: Simulate enabling metrics flag and assert <code>/metrics</code> becomes live.</li> </ul>"},{"location":"concepts/feature-flags/#rollout-principles","title":"Rollout Principles","text":"<ol> <li>Default safe (all off) until stable.</li> <li>Flags removed once feature is permanently on for 2+ releases.</li> <li>Avoid deep flag nesting \u2014 prefer flat names with dot separators.</li> </ol>"},{"location":"concepts/feature-flags/#next-steps","title":"Next Steps","text":"<ol> <li>Add settings + model scaffolding.</li> <li>Implement endpoint real logic &amp; remove placeholder 501.</li> <li>Connect flags to telemetry bootstrap.</li> <li>Add tests &amp; docs updates.</li> </ol> <p>See also: Metrics &amp; Tracing concept and Operations guide.</p>"},{"location":"concepts/metrics-tracing/","title":"Metrics &amp; Tracing (Planned)","text":"<p>This page outlines the roadmap for adding metrics collection and distributed tracing to the MTG API. The current API includes placeholder endpoints:</p> <ul> <li><code>GET /metrics</code> \u2013 returns HTTP 501 until Prometheus style metrics are exposed.</li> <li><code>GET /_trace/test</code> \u2013 returns HTTP 501; will emit a simple trace span once tracing is wired.</li> </ul>"},{"location":"concepts/metrics-tracing/#objectives","title":"Objectives","text":"<ol> <li>Provide basic service-level telemetry (request rate, latency, error ratio).</li> <li>Enable insight into upstream dependency latency (external MTG IO API, database, cache).</li> <li>Make local developer enablement effortless (zero-config defaults; env-based opt-in for exporters).</li> <li>Avoid vendor lock-in via OpenTelemetry (OTel) instrumentation.</li> </ol>"},{"location":"concepts/metrics-tracing/#metrics-plan","title":"Metrics Plan","text":"Category Metric Type Labels (Dimensions) Notes HTTP <code>http_requests_total</code> Counter method, route, status Total requests processed. HTTP <code>http_request_duration_seconds</code> Histogram method, route, status Request latency buckets. External <code>mtgio_latency_seconds</code> Histogram operation MTG IO API call durations. Cache <code>cache_hits_total</code> Counter cache_name Successful cache reads. Cache <code>cache_misses_total</code> Counter cache_name Misses (driving upstream fetches). Errors <code>exceptions_total</code> Counter exception_type Unhandled / surfaced exceptions. <p>Implementation sketch:</p> <ul> <li>Use <code>prometheus_client</code> for initial exposition (WSGI/ASGI middleware or custom registry scrape).</li> <li>Encapsulate metrics registration in a <code>telemetry/metrics.py</code> module to avoid polluting business code.</li> <li>Provide a <code>TELEMETRY_ENABLED</code> (bool) and <code>TELEMETRY_METRICS_BACKEND</code> (enum: <code>prometheus</code>, later <code>otlp</code>) in config.</li> <li>Expose <code>/metrics</code> only when enabled; otherwise keep 404 or 501 (current placeholder).</li> </ul>"},{"location":"concepts/metrics-tracing/#tracing-plan","title":"Tracing Plan","text":"Concern Approach API Incoming Requests FastAPI middleware generating a root span per request. External HTTP Calls Instrument <code>httpx</code> client with OTel instrumentation. Database (async) Add SQLAlchemy OTel instrumentation (optional gating). Cache Manual spans around cache get/set to surface latency vs upstream calls. Propagation W3C Trace Context headers (<code>traceparent</code>, <code>tracestate</code>). Export OTLP over HTTP / gRPC (configurable), fallback to console exporter for local debug. <p>Implementation sketch:</p> <pre><code>from opentelemetry import trace\nfrom opentelemetry.sdk.resources import Resource\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor, ConsoleSpanExporter\n\nresource = Resource.create({\n    \"service.name\": \"mtgapi\",\n    \"service.version\": VERSION,\n})\nprovider = TracerProvider(resource=resource)\nprovider.add_span_processor(BatchSpanProcessor(ConsoleSpanExporter()))\ntrace.set_tracer_provider(provider)\ntracer = trace.get_tracer(__name__)\n</code></pre> <p>Middleware hook (pseudo-code):</p> <pre><code>@app.middleware(\"http\")\nasync def tracing_middleware(request: Request, call_next):\n    with tracer.start_as_current_span(f\"HTTP {request.method} {request.url.path}\"):\n        response = await call_next(request)\n        return response\n</code></pre>"},{"location":"concepts/metrics-tracing/#configuration-roadmap","title":"Configuration Roadmap","text":"Variable Type Default Description <code>TELEMETRY_ENABLED</code> bool false Master toggle for metrics + tracing. <code>TELEMETRY_EXPORTER</code> enum <code>console</code> <code>console</code>, <code>otlp</code>, <code>prometheus</code> (metrics only). <code>OTLP_ENDPOINT</code> str empty Collector endpoint if exporter = otlp. <code>METRICS_PORT</code> int 8000 Future dedicated metrics port (optional)."},{"location":"concepts/metrics-tracing/#phased-delivery","title":"Phased Delivery","text":"<ol> <li>Phase 0 (Now): Placeholder endpoints (in place).</li> <li>Phase 1: Basic request metrics + cache hit/miss counters; real <code>/metrics</code> output.</li> <li>Phase 2: OTel tracing provider, HTTP + MTG IO spans.</li> <li>Phase 3: Database + cache spans; error and exception metrics.</li> <li>Phase 4: Optional dedicated metrics port &amp; OTLP exporter configuration.</li> </ol>"},{"location":"concepts/metrics-tracing/#testing-strategy","title":"Testing Strategy","text":"<ul> <li>Unit: Ensure middleware respects disabled telemetry (no spans, no metrics registry growth).</li> <li>Integration: Hit <code>/card/{id}</code> and assert metrics counters progress.</li> <li>E2E (future): Verify <code>traceparent</code> propagation to downstream calls (mock).</li> </ul>"},{"location":"concepts/metrics-tracing/#open-questions","title":"Open Questions","text":"<ul> <li>Do we need high-cardinality labels for card identifiers? (Likely no \u2014 avoid.)</li> <li>Should metrics include success vs user-error (4xx) separation? (Probably via status grouping.)</li> </ul>"},{"location":"concepts/metrics-tracing/#next-steps","title":"Next Steps","text":"<ol> <li>Introduce config toggles.</li> <li>Add metrics registry &amp; swap placeholder <code>/metrics</code> implementation.</li> <li>Add tracing provider bootstrap in lifespan.</li> <li>Instrument external service calls.</li> </ol> <p>See also: Feature Flags concept and Operations guide.</p>"},{"location":"concepts/services/","title":"Services","text":"<p>The services layer orchestrates side\u2011effects: HTTP requests, caching, database access, retries, and composition logic. Each service adheres to a small surface area and can be swapped or extended with minimal ripple.</p>"},{"location":"concepts/services/#principles","title":"Principles","text":"<ul> <li>Explicit boundaries: Every external system interaction (network, DB, cache) is mediated by a focused service.</li> <li>Retry with intent: Transient network failures use <code>tenacity</code> policies; logic errors are surfaced immediately.</li> <li>Dependency injection: Construction is centralized (see wiring) so tests can override concrete implementations.</li> <li>Async first: All I/O services expose async APIs; CPU work stays lean to preserve event\u2011loop responsiveness.</li> </ul>"},{"location":"concepts/services/#key-services","title":"Key Services","text":""},{"location":"concepts/services/#http-base","title":"HTTP Base","text":"<p>Provides a thin wrapper around <code>httpx.AsyncClient</code> adding:</p> <ul> <li>Standard timeouts</li> <li>Optional request / response logging</li> <li>Central place for future auth headers or instrumentation</li> </ul>"},{"location":"concepts/services/#mtgioapiservice","title":"MTGIOAPIService","text":"<p>Encapsulates calls to the upstream MTGIO API. Responsibilities:</p> <ul> <li>Build request URLs / parameters</li> <li>Apply retry policy for transient errors</li> <li>Deserialize upstream JSON into <code>MTGIOCard</code></li> </ul>"},{"location":"concepts/services/#cache-service","title":"Cache Service","text":"<p>Abstracts in\u2011memory (or future distributed) caching of <code>MTGCard</code> objects. Current implementation is a simple dict protected by per\u2011event loop usage; future extension paths:</p> <ul> <li>TTL / eviction policy</li> <li>Redis or Memcached backend</li> <li>Negative caching for known miss patterns</li> </ul>"},{"location":"concepts/services/#database-service","title":"Database Service","text":"<p>Wraps SQLAlchemy async engine/session creation. Even if lightly used now, isolating this logic enables:</p> <ul> <li>Connection pooling configuration</li> <li>Migration integration later (Alembic) without leaking concerns into domain code</li> <li>Easier testcontainers overrides</li> </ul>"},{"location":"concepts/services/#proxy-aggregation","title":"Proxy / Aggregation","text":"<p>The proxy service (if present) orchestrates multiple upstream sources (pricing, alternative info) and merges results into a single domain view. Currently minimal\u2014acts as an extension seam.</p>"},{"location":"concepts/services/#wiring-lifespan","title":"Wiring &amp; Lifespan","text":"<p>During FastAPI lifespan startup the dependency injection container is built (<code>wire_services</code>) and resources are initialized (HTTP clients, DB connections). On shutdown, resources are closed gracefully to avoid dangling sockets.</p>"},{"location":"concepts/services/#extending-a-service","title":"Extending a Service","text":"<ol> <li>Add interface / abstract method in the target service module or create a new service file.</li> <li>Implement concrete class.</li> <li>Register it in the wiring function / container.</li> <li>Write integration tests with the new service, plus functional tests using a mock or fake.</li> <li>Update documentation (this page + any API usage examples).</li> </ol> <p>Keep heavy transformation logic in domain or helper modules\u2014services should orchestrate, not deeply compute.</p>"},{"location":"guides/development/","title":"Development Guide","text":""},{"location":"guides/development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.12+</li> <li>Poetry</li> <li>Docker (for integration tests)</li> </ul>"},{"location":"guides/development/#setup","title":"Setup","text":"<pre><code>poetry install\n</code></pre>"},{"location":"guides/development/#tests","title":"Tests","text":"<pre><code>poetry run pytest -q\n</code></pre>"},{"location":"guides/development/#linting","title":"Linting","text":"<pre><code>poetry run ruff check .\npoetry run mypy .\n</code></pre>"},{"location":"guides/development/#docs-schema-openapi-regeneration","title":"Docs / Schema / OpenAPI Regeneration","text":"<p>Export JSON Schemas (writes to <code>docs/_generated_schemas/</code>):</p> <pre><code>task export-schemas\n</code></pre> <p>Export OpenAPI schema (writes to <code>docs/_generated_openapi/openapi.json</code>):</p> <pre><code>task export-openapi\n</code></pre> <p>Do both and build the docs site (outputs to <code>site/</code>):</p> <pre><code>task docs-refresh\n</code></pre> <p>Serve docs with live reload:</p> <pre><code>task docs-serve\n</code></pre> <p>Commit regenerated schema/OpenAPI artifacts when model or API shape changes so the published site stays in sync.</p>"},{"location":"guides/operations/","title":"Operations Guide","text":"<p>Operational guidance for deploying and running the MTG API service.</p>"},{"location":"guides/operations/#runtime-footprint","title":"Runtime Footprint","text":"<ul> <li>Stateless application process; all state is external (DB) or ephemeral (in\u2011memory cache).</li> <li>Single Uvicorn worker by default; scale horizontally for throughput.</li> </ul>"},{"location":"guides/operations/#health-readiness","title":"Health &amp; Readiness","text":"<ul> <li>Container <code>HEALTHCHECK</code> probes <code>/docs</code> (can switch to a lighter <code>/health</code> endpoint later for lower payload and privacy).</li> <li>Consider adding a dedicated <code>/healthz</code> (no auth, minimal body) for production probes.</li> </ul>"},{"location":"guides/operations/#configuration-delivery","title":"Configuration Delivery","text":"<p>Configuration is environment driven (env vars). For container orchestration:</p> <ul> <li>Use a config map / secret store for database URL.</li> <li>Keep non-sensitive defaults baked; override sensitive values only.</li> </ul>"},{"location":"guides/operations/#logging","title":"Logging","text":"<ul> <li>Structured logging can be enabled by adjusting log format in <code>APIConfiguration</code> (currently simple text).</li> <li>Recommendation: redirect stdout/stderr to a centralized aggregator (e.g. Loki, ELK).</li> </ul>"},{"location":"guides/operations/#metrics-future","title":"Metrics (Future)","text":"<p>Potential libraries: <code>prometheus-client</code> or <code>opentelemetry-instrumentation-fastapi</code>.</p> <ul> <li>Latency histogram (per endpoint)</li> <li>Cache hit ratio</li> <li>Upstream call success/failure counters</li> </ul>"},{"location":"guides/operations/#tracing-future","title":"Tracing (Future)","text":"<p>OpenTelemetry instrumentation could correlate:</p> <ul> <li>Incoming request spans</li> <li>Outbound HTTP calls (MTGIO)</li> <li>DB queries</li> </ul>"},{"location":"guides/operations/#deployment-checklist","title":"Deployment Checklist","text":"<ol> <li>Build image (CI) with pinned Python base.</li> <li>Run security scan (Bandit now; add container scanner later).</li> <li>Push to registry (GHCR).</li> <li>Deploy orchestrator manifest (compose, k8s, Nomad, etc.).</li> <li>Verify health probe passes.</li> <li>Run smoke test: GET <code>/card/{known_id}</code>.</li> </ol>"},{"location":"guides/operations/#scaling","title":"Scaling","text":"<ul> <li>Horizontal scaling limited by shared cache coherence (current cache is per process). Introduce Redis to consolidate.</li> <li>CPU bound? Add workers (<code>--workers</code> via Gunicorn + Uvicorn workers) or optimize hot paths.</li> </ul>"},{"location":"guides/operations/#failure-modes","title":"Failure Modes","text":"Failure Symptom Mitigation Upstream MTGIO outage 5xx from /card Retry policy / circuit breaker (future) DB unavailable 500 on DB-backed endpoints Connection pool backoff, readiness gating Cache bloat Memory growth Introduce size cap + metrics High latency Slow responses Profile; add async timeouts &amp; fallback"},{"location":"guides/operations/#backups-data","title":"Backups &amp; Data","text":"<p>Currently no persistent data layer aside from Postgres (if used). Rely on standard DB backup tooling (snapshots / PITR) if persistence matters.</p> <p>Keep operational concerns decoupled: adding metrics or tracing should not require touching domain logic\u2014use instrumentation wrappers.</p>"},{"location":"guides/testing-strategy/","title":"Testing Strategy","text":"<p>A layered test approach balances speed, confidence, and maintainability.</p>"},{"location":"guides/testing-strategy/#layers","title":"Layers","text":"Layer Scope Speed Purpose Unit Pure functions / small methods Fastest Logic correctness &amp; edge cases Functional Service + domain interactions (no external network) Fast Contract behavior Integration External APIs, DB (Testcontainers) Moderate Real I/O correctness End-to-end (future) Full API flow with container orchestration Slowest Deployment realism"},{"location":"guides/testing-strategy/#guiding-principles","title":"Guiding Principles","text":"<ul> <li>Fail fast: Unit/functional tests catch regressions before slower integration layers run.</li> <li>Isolate side effects: Use dependency injection to swap real services for fakes/mocks in functional tests.</li> <li>Determinism: External variability (network, time) is minimized or controlled.</li> <li>Readable fixtures: Prefer factory helpers in <code>tests/common</code> over deep parameterization.</li> </ul>"},{"location":"guides/testing-strategy/#asynchronous-testing","title":"Asynchronous Testing","text":"<p><code>pytest-asyncio</code> powers async tests. Keep event loop scope at <code>session</code> for expensive resources (e.g. DB container) but isolate state via fixtures.</p>"},{"location":"guides/testing-strategy/#testcontainers-usage","title":"Testcontainers Usage","text":"<p>Integration tests spin Postgres (and potentially future services) in ephemeral containers:</p> <ul> <li>Ensures parity with production driver (asyncpg + SQLAlchemy)</li> <li>Avoids mocking SQL behavior</li> </ul>"},{"location":"guides/testing-strategy/#adding-a-new-test","title":"Adding a New Test","text":"<ol> <li>Pick the narrowest appropriate layer.</li> <li>If hitting external HTTP, prefer recorded sample or a mock unless the purpose is real upstream contract verification.</li> <li>Add assertions for both expected data and absence/presence of side effects (e.g. cache entry created).</li> <li>Run <code>task test</code> (or a narrower marker) before committing.</li> </ol>"},{"location":"guides/testing-strategy/#future-enhancements","title":"Future Enhancements","text":"<ul> <li>Contract tests for upstream API schema drift.</li> <li>Performance smoke test measuring 95th percentile response time.</li> <li>Coverage thresholds enforced in CI.</li> </ul> <p>Keep tests expressive\u2014naming clarity and focused assertions beat overly DRY abstractions.</p>"},{"location":"reference/api/","title":"API Usage","text":"<p>Base URL (local): <code>http://localhost:8000</code></p>"},{"location":"reference/api/#endpoints","title":"Endpoints","text":"Method Path Description GET <code>/card/{id}</code> Fetch a card by numeric identifier GET <code>/card/{id}/image</code> Fetch card image (webp)"},{"location":"reference/api/#examples","title":"Examples","text":"<pre><code>curl -s http://localhost:8000/card/597 | jq\n</code></pre> <pre><code>curl -o card.webp http://localhost:8000/card/597/image\n</code></pre>"},{"location":"reference/configuration/","title":"Configuration","text":"<p>The application uses structured environment-based settings.</p>"},{"location":"reference/configuration/#key-variables","title":"Key Variables","text":"Variable Description <code>MTGAPI_MTGIO__BASE_URL</code> Upstream MTGIO API base URL <code>MTGAPI_DATABASE__CONNECTION_STRING</code> Async database connection string"},{"location":"reference/configuration/#defaults","title":"Defaults","text":"<p>See <code>mtgapi/config/settings</code> for defaults and schema.</p>"},{"location":"reference/schemas/","title":"Schemas","text":"<p>The JSON Schemas for key domain models are generated from Pydantic models.</p> <p>Generation pipeline:</p> <ol> <li><code>scripts/export_schemas.py</code> writes raw schema JSON into <code>docs/_generated_schemas/*.schema.json</code>.</li> <li><code>scripts/update_schemas_markdown.py</code> embeds those schemas below.</li> </ol> <p>Regenerate locally:</p> <pre><code>task export-schemas &amp;&amp; python scripts/update_schemas_markdown.py\n</code></pre> <p>Generated schema documentation. Do not edit within markers; run scripts/update_schemas_markdown.py instead.</p>"},{"location":"reference/schemas/#summary","title":"Summary","text":"Model File Size (bytes) Top-level keys Mana Value <code>mana_value.schema.json</code> 1162 4 MTG Card <code>mtg_card.schema.json</code> 9361 6 MTGio Card <code>mtgio_card.schema.json</code> 6611 6"},{"location":"reference/schemas/#mana-value","title":"Mana Value","text":"Mana Value JSON Schema <pre><code>{\n  \"description\": \"Represents the mana value of a Magic: The Gathering card.\",\n  \"properties\": {\n    \"generic\": {\n      \"anyOf\": [\n        {\n          \"type\": \"integer\"\n        },\n        {\n          \"type\": \"string\"\n        }\n      ],\n      \"default\": 0,\n      \"description\": \"Generic mana cost\",\n      \"title\": \"Generic\"\n    },\n    \"colorless\": {\n      \"default\": 0,\n      \"description\": \"Colorless mana cost\",\n      \"title\": \"Colorless\",\n      \"type\": \"integer\"\n    },\n    \"white\": {\n      \"default\": 0,\n      \"description\": \"White mana cost\",\n      \"title\": \"White\",\n      \"type\": \"integer\"\n    },\n    \"blue\": {\n      \"default\": 0,\n      \"description\": \"Blue mana cost\",\n      \"title\": \"Blue\",\n      \"type\": \"integer\"\n    },\n    \"black\": {\n      \"default\": 0,\n      \"description\": \"Black mana cost\",\n      \"title\": \"Black\",\n      \"type\": \"integer\"\n    },\n    \"red\": {\n      \"default\": 0,\n      \"description\": \"Red mana cost\",\n      \"title\": \"Red\",\n      \"type\": \"integer\"\n    },\n    \"green\": {\n      \"default\": 0,\n      \"description\": \"Green mana cost\",\n      \"title\": \"Green\",\n      \"type\": \"integer\"\n    }\n  },\n  \"title\": \"ManaValue\",\n  \"type\": \"object\"\n}\n</code></pre>"},{"location":"reference/schemas/#mtg-card","title":"MTG Card","text":"MTG Card JSON Schema <pre><code>{\n  \"$defs\": {\n    \"Keyword\": {\n      \"description\": \"Enumeration for different types of counters that can be on a Magic: The Gathering card.\",\n      \"enum\": [\n        \"Deathtouch\",\n        \"Defender\",\n        \"Double Strike\",\n        \"Enchant\",\n        \"Equip\",\n        \"First Strike\",\n        \"Flash\",\n        \"Flying\",\n        \"Haste\",\n        \"Hexproof\",\n        \"Indestructible\",\n        \"Intimidate\",\n        \"Forestwalk\",\n        \"Islandwalk\",\n        \"Mountainwalk\",\n        \"Plainswalk\",\n        \"Swampwalk\",\n        \"Lifelink\",\n        \"Protection\",\n        \"Reach\",\n        \"Shroud\",\n        \"Trample\",\n        \"Vigilance\",\n        \"Ward\",\n        \"Banding\",\n        \"Rampage\",\n        \"Cumulative Upkeep\",\n        \"Flanking\",\n        \"Phasing\",\n        \"Buyback\",\n        \"Shadow\",\n        \"Cycling\",\n        \"Echo\",\n        \"Horsemanship\",\n        \"Fading\",\n        \"Kicker\",\n        \"Flashback\",\n        \"Madness\",\n        \"Fear\",\n        \"Morph\",\n        \"Amplify\",\n        \"Provoke\",\n        \"Storm\",\n        \"Affinity\",\n        \"Entwine\",\n        \"Modular\",\n        \"Sunburst\",\n        \"Bushido\",\n        \"Soulshift\",\n        \"Splice\",\n        \"Offering\",\n        \"Ninjutsu\",\n        \"Epic\",\n        \"Convoke\",\n        \"Dredge\",\n        \"Transmute\",\n        \"Bloodthirst\",\n        \"Haunt\",\n        \"Replicate\",\n        \"Forecast\",\n        \"Graft\",\n        \"Recover\",\n        \"Ripple\",\n        \"Split Second\",\n        \"Suspend\",\n        \"Vanishing\",\n        \"Absorb\",\n        \"Aura Swap\",\n        \"Delve\",\n        \"Fortify\",\n        \"Frenzy\",\n        \"Gravestorm\",\n        \"Poisonous\",\n        \"Transfigure\",\n        \"Champion\",\n        \"Changeling\",\n        \"Evoke\",\n        \"Hideaway\",\n        \"Prowl\",\n        \"Reinforce\",\n        \"Conspire\",\n        \"Persist\",\n        \"Wither\",\n        \"Retrace\",\n        \"Devour\",\n        \"Exalted\",\n        \"Unearth\",\n        \"Cascade\",\n        \"Annihilator\",\n        \"Level Up\",\n        \"Rebound\",\n        \"Umbra Armor\",\n        \"Infect\",\n        \"Battle Cry\",\n        \"Living Weapon\",\n        \"Undying\",\n        \"Miracle\",\n        \"Soulbond\",\n        \"Overload\",\n        \"Scavenge\",\n        \"Unleash\",\n        \"Cipher\",\n        \"Evolve\",\n        \"Extort\",\n        \"Fuse\",\n        \"Bestow\",\n        \"Tribute\",\n        \"Dethrone\",\n        \"Hidden Agenda\",\n        \"Outlast\",\n        \"Prowess\",\n        \"Dash\",\n        \"Exploit\",\n        \"Menace\",\n        \"Renown\",\n        \"Awaken\",\n        \"Devoid\",\n        \"Ingest\",\n        \"Myriad\",\n        \"Surge\",\n        \"Skulk\",\n        \"Emerge\",\n        \"Escalate\",\n        \"Melee\",\n        \"Crew\",\n        \"Fabricate\",\n        \"Partner\",\n        \"Undaunted\",\n        \"Improvise\",\n        \"Aftermath\",\n        \"Embalm\",\n        \"Eternalize\",\n        \"Afflict\",\n        \"Ascend\",\n        \"Assist\",\n        \"Jump-Start\",\n        \"Mentor\",\n        \"Afterlife\",\n        \"Riot\",\n        \"Spectacle\",\n        \"Escape\",\n        \"Companion\",\n        \"Mutate\",\n        \"Encore\",\n        \"Boast\",\n        \"Foretell\",\n        \"Demonstrate\",\n        \"Daybound and Nightbound\",\n        \"Disturb\",\n        \"Decayed\",\n        \"Cleave\",\n        \"Training\",\n        \"Compleated\",\n        \"Reconfigure\",\n        \"Blitz\",\n        \"Casualty\",\n        \"Enlist\",\n        \"Read Ahead\",\n        \"Ravenous\",\n        \"Squad\",\n        \"Space Sculptor\",\n        \"Visit\",\n        \"Prototype\",\n        \"Living Metal\",\n        \"More Than Meets the Eye\",\n        \"For Mirrodin!\",\n        \"Toxic\",\n        \"Backup\",\n        \"Bargain\",\n        \"Craft\",\n        \"Disguise\",\n        \"Solved\",\n        \"Plot\",\n        \"Saddle\",\n        \"Spree\",\n        \"Freerunning\",\n        \"Gift\",\n        \"Offspring\",\n        \"Impending\",\n        \"Exhaust\",\n        \"Max Speed\",\n        \"Start Your Engines!\",\n        \"Harmonize\",\n        \"Mobilize\"\n      ],\n      \"title\": \"Keyword\",\n      \"type\": \"string\"\n    },\n    \"MTGCardAlias\": {\n      \"description\": \"Represents a foreign name for a Magic: The Gathering card.\",\n      \"properties\": {\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"language\": {\n          \"title\": \"Language\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"language\"\n      ],\n      \"title\": \"MTGCardAlias\",\n      \"type\": \"object\"\n    },\n    \"MTGCardRuling\": {\n      \"description\": \"Represents a ruling for a Magic: The Gathering card.\",\n      \"properties\": {\n        \"date\": {\n          \"title\": \"Date\",\n          \"type\": \"string\"\n        },\n        \"text\": {\n          \"title\": \"Text\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"date\",\n        \"text\"\n      ],\n      \"title\": \"MTGCardRuling\",\n      \"type\": \"object\"\n    },\n    \"ManaValue\": {\n      \"description\": \"Represents the mana value of a Magic: The Gathering card.\",\n      \"properties\": {\n        \"generic\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"string\"\n            }\n          ],\n          \"default\": 0,\n          \"description\": \"Generic mana cost\",\n          \"title\": \"Generic\"\n        },\n        \"colorless\": {\n          \"default\": 0,\n          \"description\": \"Colorless mana cost\",\n          \"title\": \"Colorless\",\n          \"type\": \"integer\"\n        },\n        \"white\": {\n          \"default\": 0,\n          \"description\": \"White mana cost\",\n          \"title\": \"White\",\n          \"type\": \"integer\"\n        },\n        \"blue\": {\n          \"default\": 0,\n          \"description\": \"Blue mana cost\",\n          \"title\": \"Blue\",\n          \"type\": \"integer\"\n        },\n        \"black\": {\n          \"default\": 0,\n          \"description\": \"Black mana cost\",\n          \"title\": \"Black\",\n          \"type\": \"integer\"\n        },\n        \"red\": {\n          \"default\": 0,\n          \"description\": \"Red mana cost\",\n          \"title\": \"Red\",\n          \"type\": \"integer\"\n        },\n        \"green\": {\n          \"default\": 0,\n          \"description\": \"Green mana cost\",\n          \"title\": \"Green\",\n          \"type\": \"integer\"\n        }\n      },\n      \"title\": \"ManaValue\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"Represents a Magic: The Gathering card.\",\n  \"properties\": {\n    \"id\": {\n      \"description\": \"Unique identifier for the card\",\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"multiverse_id\": {\n      \"description\": \"Multiverse ID of the card, if available\",\n      \"title\": \"Multiverse Id\",\n      \"type\": \"string\"\n    },\n    \"name\": {\n      \"description\": \"Name of the card\",\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    },\n    \"aliases\": {\n      \"description\": \"List of foreign names for the card\",\n      \"items\": {\n        \"$ref\": \"#/$defs/MTGCardAlias\"\n      },\n      \"title\": \"Aliases\",\n      \"type\": \"array\"\n    },\n    \"rulings\": {\n      \"description\": \"List of rulings for the card\",\n      \"items\": {\n        \"$ref\": \"#/$defs/MTGCardRuling\"\n      },\n      \"title\": \"Rulings\",\n      \"type\": \"array\"\n    },\n    \"mana_value\": {\n      \"$ref\": \"#/$defs/ManaValue\",\n      \"description\": \"Mana value of the card\"\n    },\n    \"types\": {\n      \"description\": \"List of types the card belongs to\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"title\": \"Types\",\n      \"type\": \"array\"\n    },\n    \"subtypes\": {\n      \"description\": \"List of subtypes the card belongs to\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"title\": \"Subtypes\",\n      \"type\": \"array\"\n    },\n    \"keywords\": {\n      \"description\": \"List of counters on the card\",\n      \"items\": {\n        \"$ref\": \"#/$defs/Keyword\"\n      },\n      \"title\": \"Keywords\",\n      \"type\": \"array\"\n    },\n    \"text\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": \"\",\n      \"description\": \"Text on the card, such as rules text or abilities\",\n      \"title\": \"Text\"\n    },\n    \"flavor\": {\n      \"default\": \"\",\n      \"description\": \"Flavor text of the card, if any\",\n      \"title\": \"Flavor\",\n      \"type\": \"string\"\n    },\n    \"power\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"description\": \"Power of the creature card\",\n      \"title\": \"Power\"\n    },\n    \"toughness\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"description\": \"Toughness of the creature card\",\n      \"title\": \"Toughness\"\n    },\n    \"rarity\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"description\": \"Rarity of the card\",\n      \"title\": \"Rarity\"\n    },\n    \"set_name\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"description\": \"Set name where the card belongs\",\n      \"title\": \"Set Name\"\n    },\n    \"image_url\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": \"\",\n      \"description\": \"URL to the card's image\",\n      \"title\": \"Image Url\"\n    }\n  },\n  \"required\": [\n    \"id\",\n    \"multiverse_id\",\n    \"name\",\n    \"mana_value\"\n  ],\n  \"title\": \"MTGCard\",\n  \"type\": \"object\"\n}\n</code></pre>"},{"location":"reference/schemas/#mtgio-card","title":"MTGio Card","text":"MTGio Card JSON Schema <pre><code>{\n  \"$defs\": {\n    \"MTGCardAlias\": {\n      \"description\": \"Represents a foreign name for a Magic: The Gathering card.\",\n      \"properties\": {\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"language\": {\n          \"title\": \"Language\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"language\"\n      ],\n      \"title\": \"MTGCardAlias\",\n      \"type\": \"object\"\n    },\n    \"MTGCardRuling\": {\n      \"description\": \"Represents a ruling for a Magic: The Gathering card.\",\n      \"properties\": {\n        \"date\": {\n          \"title\": \"Date\",\n          \"type\": \"string\"\n        },\n        \"text\": {\n          \"title\": \"Text\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"date\",\n        \"text\"\n      ],\n      \"title\": \"MTGCardRuling\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"Represents a Magic: The Gathering card with additional fields for MTGIO.\",\n  \"properties\": {\n    \"names\": {\n      \"description\": \"List of names the card can have\",\n      \"examples\": [\n        [\n          \"Lightning Bolt\"\n        ]\n      ],\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"title\": \"Names\",\n      \"type\": \"array\"\n    },\n    \"mana_cost\": {\n      \"description\": \"Mana cost of the card in {X}({C}*) format\",\n      \"examples\": [\n        \"{3}{W}{U}\"\n      ],\n      \"title\": \"Mana Cost\",\n      \"type\": \"string\"\n    },\n    \"colors\": {\n      \"description\": \"List of colors the card belongs to\",\n      \"examples\": [\n        [\n          \"Red\"\n        ],\n        [\n          \"Blue\",\n          \"Red\"\n        ]\n      ],\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"title\": \"Colors\",\n      \"type\": \"array\"\n    },\n    \"color_identity\": {\n      \"description\": \"List of colors that define the card's identity (color codes, e.g. ['R', 'U'])\",\n      \"examples\": [\n        [\n          \"R\"\n        ],\n        [\n          \"R\",\n          \"U\"\n        ]\n      ],\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"title\": \"Color Identity\",\n      \"type\": \"array\"\n    },\n    \"rarity\": {\n      \"default\": \"common\",\n      \"description\": \"Rarity of the card (e.g., common, uncommon, rare, mythic)\",\n      \"examples\": [\n        \"common\",\n        \"uncommon\",\n        \"rare\",\n        \"mythic\"\n      ],\n      \"maxLength\": 10,\n      \"minLength\": 1,\n      \"title\": \"Rarity\",\n      \"type\": \"string\"\n    },\n    \"types\": {\n      \"description\": \"List of types the card belongs to (e.g. Creature, Instant, Sorcery, Artifact, Enchantment, Land, Planeswalker)\",\n      \"examples\": [\n        [\n          \"Creature\"\n        ],\n        [\n          \"Instant\"\n        ]\n      ],\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"minItems\": 1,\n      \"title\": \"Types\",\n      \"type\": \"array\"\n    },\n    \"subtypes\": {\n      \"description\": \"List of subtypes the card belongs to (e.g. Human, Wizard, Squirrel)\",\n      \"examples\": [\n        [\n          \"Human\"\n        ],\n        [\n          \"Rat\",\n          \"Squirrel\"\n        ]\n      ],\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"title\": \"Subtypes\",\n      \"type\": \"array\"\n    },\n    \"supertypes\": {\n      \"description\": \"List of supertypes the card belongs to (e.g. Basic, Legendary, Snow, World, Ongoing)\",\n      \"examples\": [\n        [\n          \"Legendary\"\n        ]\n      ],\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"title\": \"Supertypes\",\n      \"type\": \"array\"\n    },\n    \"text\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"description\": \"Oracle text of the card. May contain mana symbols and other symbols.\",\n      \"examples\": [\n        \"Flying, Vigilance\"\n      ],\n      \"title\": \"Text\"\n    },\n    \"flavor\": {\n      \"default\": \"\",\n      \"description\": \"Flavor text of the card, if any\",\n      \"examples\": [\n        \"\\\"The storm is coming.\\\"\"\n      ],\n      \"title\": \"Flavor\",\n      \"type\": \"string\"\n    },\n    \"power\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"description\": \"Power of the creature card (e.g. '3', 'X')\",\n      \"examples\": [\n        \"3\",\n        \"X\"\n      ],\n      \"title\": \"Power\"\n    },\n    \"toughness\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"description\": \"Toughness of the creature card (e.g. '3', 'X')\",\n      \"examples\": [\n        \"3\",\n        \"X\"\n      ],\n      \"title\": \"Toughness\"\n    },\n    \"layout\": {\n      \"default\": \"normal\",\n      \"description\": \"Layout of the card (e.g., normal, split, flip, double-faced, token, plane, scheme, phenomenon, leveler, vanguard, aftermath)\",\n      \"examples\": [\n        \"normal\",\n        \"split\",\n        \"flip\",\n        \"double-faced\",\n        \"token\",\n        \"plane\",\n        \"scheme\",\n        \"phenomenon\",\n        \"leveler\",\n        \"vanguard\",\n        \"aftermath\"\n      ],\n      \"maxLength\": 12,\n      \"minLength\": 1,\n      \"title\": \"Layout\",\n      \"type\": \"string\"\n    },\n    \"rulings\": {\n      \"description\": \"List of rulings for the card\",\n      \"items\": {\n        \"$ref\": \"#/$defs/MTGCardRuling\"\n      },\n      \"title\": \"Rulings\",\n      \"type\": \"array\"\n    },\n    \"foreign_names\": {\n      \"description\": \"List of foreign names for the card\",\n      \"items\": {\n        \"$ref\": \"#/$defs/MTGCardAlias\"\n      },\n      \"title\": \"Foreign Names\",\n      \"type\": \"array\"\n    },\n    \"printings\": {\n      \"description\": \"List of sets the card has been printed in\",\n      \"examples\": [\n        [\n          \"LEA\",\n          \"2ED\"\n        ]\n      ],\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"title\": \"Printings\",\n      \"type\": \"array\"\n    },\n    \"id\": {\n      \"description\": \"Unique identifier for the card in the MTGIO database (SHA1 hash of setCode + cardName + cardImageName)\",\n      \"examples\": [\n        \"a1b2c3d4e5f6g7h8i9j0\"\n      ],\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"multiverse_id\": {\n      \"default\": \"\",\n      \"description\": \"Multiverse ID of the card, if available\",\n      \"examples\": [\n        \"123456\"\n      ],\n      \"title\": \"Multiverse Id\",\n      \"type\": \"string\"\n    },\n    \"image_url\": {\n      \"description\": \"URL to the card's image in the MTGIO database\",\n      \"examples\": [\n        \"http://example.com/image.jpg\"\n      ],\n      \"title\": \"Image Url\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"mana_cost\",\n    \"id\",\n    \"image_url\"\n  ],\n  \"title\": \"MTGIOCard\",\n  \"type\": \"object\"\n}\n</code></pre>"}]}